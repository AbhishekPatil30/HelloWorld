pipeline {
    agent any
    tools {
        maven 'maven'
    }
    environment {
        TOMCAT_USER = 'ec2-user'
        TOMCAT_HOST = '13.201.47.197'
        TOMCAT_PATH = '/opt/apache-tomcat-9.0.91/webapps/'
        ARTIFACTORY_URL = 'http://18.60.157.183:8081/artifactory'
        ARTIFACTORY_REPO = 'libs-release-local'
        SONARQUBE_URL = 'http://18.60.157.183:9000'
        SONARQUBE_PROJECT_KEY = 'sqp_38164e737904d57e571fc617f07f4269179c155c'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', credentialsId: 'github', url: 'https://github.com/shashi26g/HelloWorld.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
            post {
                success {
                    echo "Archiving the Artifacts"
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }

        stage('Upload to Artifactory') {
            steps {
                script {
                    def server = Artifactory.server('jfrog')
                    def uploadSpec = """{
                        "files": [{
                            "pattern": "target/*.war",
                            "target": "${ARTIFACTORY_REPO}/"
                        }]
                    }"""
                    server.upload(uploadSpec)
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'sonar', variable: 'SONARQUBE_TOKEN')]) {
                        withSonarQubeEnv('sonar') {
                            sh 'mvn sonar:sonar -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} -Dsonar.login=${SONARQUBE_TOKEN}'
                        }
                    }
                }
            }
            post {
                failure {
                    echo "SonarQube analysis failed. Please check SonarQube permissions and configuration."
                }
            }
        }

        stage('Deploy') {
            steps {
                sshagent(['tomcat']) {
                    sh "rsync -avz -e 'ssh -o StrictHostKeyChecking=no' --delete target/*.war ${TOMCAT_USER}@${TOMCAT_HOST}:${TOMCAT_PATH}"
                }
            }
        }
    }
    post {
        success {
            mail bcc: '', body: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) succeeded. Job URL: ${env.BUILD_URL}", cc: '', from: '', replyTo: '', subject: "Build succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}", to: 'you@example.com'
        }
        failure {
            mail bcc: '', body: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) failed. Job URL: ${env.BUILD_URL}", cc: '', from: '', replyTo: '', subject: "Build failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}", to: 'you@example.com'
        }
    }
}
